dependsOn: Job_1
pool:
  name: Azure Pipelines
#Your build pipeline references the ‘PrereleaseVersion’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘PrereleaseVersion’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references the ‘PrereleaseVersion’ variable, which you’ve selected to be settable at queue time. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it settable at queue time. See https://go.microsoft.com/fwlink/?linkid=865971
#Your build pipeline references an undefined variable named ‘$env:reason’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘$env:reason’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘$env:reason’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘$env:reason’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘$env:cswinrtVersion’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references an undefined variable named ‘$env:cswinrtVersion’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab. See https://go.microsoft.com/fwlink/?linkid=865972
variables:
  MajorVersion: '1'
  MinorVersion: '4'
  PatchVersion: '2'

steps:
- script: |
   rem Parse the build-generated Build.BuildNumber into components that 
   rem can be recombined for version resources, nuget packages, etc.
   
   @echo off
   
   rem Encode the build date/rev into a 16 bit value for resource versions
   if "$(PrereleaseVersion)"=="" (
   set RevisionBase=30000
   ) else (
   set RevisionBase=0
   )
   for /f "tokens=4,5 delims=." %%i in ("$(Build.BuildNumber)") do set BuildMetadata=%%i.%%j & set /a BuildRevision=%RevisionBase%+(((%%i/10000)-20)*366+((%%i)%%10000)/100*31+((%%i)%%100))*10+%%j
   
   set VersionNumber=$(MajorVersion).$(MinorVersion).$(PatchVersion).%BuildRevision%
   
   if "$(PrereleaseVersion)"=="" (
   set NugetVersion=$(MajorVersion).$(MinorVersion).$(PatchVersion)
   ) else (
   set NugetVersion=$(Build.BuildNumber)
   )
   
   rem Export generated version numbers back for subsequent tasks
   echo ##vso[task.setvariable variable=BuildMetadata;]%BuildMetadata%
   echo ##vso[task.setvariable variable=BuildRevision;]%BuildRevision%
   echo ##vso[task.setvariable variable=VersionNumber;]%VersionNumber%
   echo ##vso[task.setvariable variable=NugetVersion;]%NugetVersion%
  workingDirectory: '$(Build.SourcesDirectory)'
  displayName: 'Parse Versions'

- powershell: |
   # If we're doing a release, cut a WinUI PR
   if ("$(PrereleaseVersion)" -eq "")
   {
     $updateCsWinRTPipelineID = 58312
     $branch = "master"
     $runInfo = (az pipelines run `
       --organization https://dev.azure.com/microsoft `
       --project WinUI `
       --id $updateCsWinRTPipelineID `
       --branch $branch) | ConvertFrom-Json
   
     $buildUrl = $runInfo.url.Replace("_apis/build/Builds/","_build/results?buildId=")
   
     Start-Process $buildUrl
   }
   
   # On a nightly, we want to just trigger a CI build
   if ($($env:reason) -eq "Schedule")
   {
     $WinUICIPipelineID = 38157
     $branch = "master"
     $runInfo = (az pipelines run `
       --organization https://dev.azure.com/microsoft `
       --project WinUI `
       --id $WinUICIPipelineID `
       --branch $branch `
       --variables "privateCsWinRTNupkgVersion=$($env:cswinrtVersion)") | ConvertFrom-Json
   
     $buildUrl = $runInfo.url.Replace("_apis/build/Builds/","_build/results?buildId=")
   
     Start-Process $buildUrl
   }
  errorActionPreference: continue
  ignoreLASTEXITCODE: true
  displayName: 'Run WinUI UpdateCSWinRT Pipeline'
  continueOnError: true
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
    cswinrtVersion: $(NugetVersion)
    reason: $(Build.Reason)
